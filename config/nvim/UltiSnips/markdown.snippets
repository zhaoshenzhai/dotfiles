# Math
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def notMath():
	return vim.eval('vimtex#syntax#in_mathzone()') != '1'
endglobal

# General
snippet bf "bold" i
**$1**$0
endsnippet

context "notMath()"
snippet it "italics" i
_$1_$0
endsnippet

priority 100
snippet qed "qed" i
<span style="float:right;">$\blacksquare$</span>
endsnippet

priority 200
snippet exqed "exqed" i
<span style="float:right;">$\blacklozenge$</span>
endsnippet

# Convenience
snippet SQ "single quotes" it
$\textrm{\`}$$1$\textrm{'}$$0
endsnippet

context "notMath()"
priority 100
snippet S "appostrophe" it
$\textrm{'}$s
endsnippet

snippet DQ "double quotes" it
$\textrm{\`\`}$$1$\textrm{''}$$0
endsnippet

# Brackets
priority 50
context "math()"
snippet no "||||" i
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet lno "||||" i
\l\|$1\r\|$0
endsnippet

priority 200
context "math()"
snippet opno "operator norm" i
\|$1\|_\textrm{op}$0
endsnippet

priority 300
context "math()"
snippet lopno "operator norm" i
\l\|$1\r\|_\textrm{op}$0
endsnippet

# MathLink
context "notMath()"
snippet MA "mathLink: auto" b
---
mathLink: auto
---

$0
endsnippet

context "notMath()"
snippet MC "mathLink: ..." b
---
mathLink: $1
---

$0
endsnippet

# Environments
snippet pro "begin proof" b
_Proof_. $0
endsnippet

snippet rem "begin remark" b
**Remark.** $0
endsnippet

snippet eq "begin equation" b
$$\begin{equation}
	$0
\end{equation}$$
endsnippet

snippet 2ci "begin dcases" b
\begin{dcases}
	$1 & \textrm{\it{if\hspace{0.1in}}}$2 \\\\
	$0 & \textrm{\it{else}}
\end{dcases}
endsnippet

# Templates
snippet def "Definition" b
<div class="topSpace"></div>

Date Created: `!p from datetime import datetime
if not snip.c:
    snip.rv=datetime.now().strftime("%d/%m/%Y %H:%M:%S")`
Tags: #Definition #In_Progress

Types: _Not Applicable_
Examples: _Not Applicable_
Constructions: _Not Applicable_
Generalizations: _Not Applicable_

Properties: _Not Applicable_
Sufficiencies: _Not Applicable_
Equivalences: _Not Applicable_
Justifications: _Not Applicable_

\`\`\` ad-Definition
title: Definition.

_$0_

\`\`\`
endsnippet

snippet axi "Axiom" b
<div class="topSpace"></div>

Date Created: `!p from datetime import datetime
if not snip.c:
    snip.rv=datetime.now().strftime("%d/%m/%Y %H:%M:%S")`
Tags: #Axiom #In_Progress

Constructions: _Not Applicable_
Generalizations: _Not Applicable_

Properties: _Not Applicable_
Sufficiencies: _Not Applicable_
Equivalences: _Not Applicable_

\`\`\` ad-Axiom
title: Axiom.

_$0_

\`\`\`
endsnippet

snippet prp "Proposition" b
<div class="topSpace"></div>

Date Created: `!p from datetime import datetime
if not snip.c:
    snip.rv=datetime.now().strftime("%d/%m/%Y %H:%M:%S")`
Tags: #Proposition #In_Progress

Proved by: _Not Applicable_
References: _Not Applicable_
Justifications: _Not Applicable_

Specializations: _Not Applicable_
Generalizations: _Not Applicable_

\`\`\` ad-Proposition
title: Proposition.

_$1_

\`\`\`

_Proof_. $0
endsnippet

snippet thm "Theorem" b
<div class="topSpace"></div>

Date Created: `!p from datetime import datetime
if not snip.c:
    snip.rv=datetime.now().strftime("%d/%m/%Y %H:%M:%S")`
Tags: #Theorem #In_Progress

Proved by: _Not Applicable_
References: _Not Applicable_
Justifications: _Not Applicable_

Specializations: _Not Applicable_
Generalizations: _Not Applicable_

\`\`\` ad-Theorem
title: Theorem.

_$1_

\`\`\`

_Proof_. $0
endsnippet

snippet moc "Map of Content" b
<div class="topSpace"></div>

Date Created: `!p from datetime import datetime
if not snip.c:
    snip.rv=datetime.now().strftime("%d/%m/%Y %H:%M:%S")`
Tags: #MOC #In_Progress

Context: _Not Applicable_
Excursions: _Not Applicable_
Abstractions: _Not Applicable_

$\huge\rm\bf{$1}\normalsize\rm\bf{$2}$ is the study of $0

---

**Constructions.** 

---

**Characterizations.** 

---

**Computations.** 
endsnippet

snippet lec "Lecture" b
<div class="topSpace"></div>

Date Created: `!p from datetime import datetime
if not snip.c:
    snip.rv=datetime.now().strftime("%d/%m/%Y %H:%M:%S")`
Tags: #Lecture/$1

$0
endsnippet
