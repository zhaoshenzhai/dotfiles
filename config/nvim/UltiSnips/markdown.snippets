# Math
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def notMath():
	return vim.eval('vimtex#syntax#in_mathzone()') != '1'
endglobal

# General
context "notMath()"
snippet bf "bold" i
<b>$1</b>$0
endsnippet

context "notMath()"
snippet it "italics" i
<i>$1</i>$0
endsnippet

priority 100
snippet qed "qed" i
<span style="float:right;">$\blacksquare$</span>
endsnippet

priority 200
snippet exqed "exqed" i
<span style="float:right;">$\blacklozenge$</span>
endsnippet

priority 200
snippet COLOR "color" i
<span style="color:${1:gray}">$2</span>$0
endsnippet

# Convenience
snippet SQ "single quotes" it
‘$1’$0
endsnippet

snippet DQ "double quotes" it
‘‘$1’’$0
endsnippet

context "notMath()"
priority 100
snippet S "appostrophe" it
’$0
endsnippet

snippet > "Indent" b
&emsp;&emsp;
endsnippet

# Brackets
priority 50
context "math()"
snippet no "||||" i
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet lno "||||" i
\l\|$1\r\|$0
endsnippet

priority 200
context "math()"
snippet opno "operator norm" i
\|$1\|_\textrm{op}$0
endsnippet

priority 300
context "math()"
snippet lopno "operator norm" i
\l\|$1\r\|_\textrm{op}$0
endsnippet

# MathLink
context "notMath()"
snippet MA "mathLink: auto" b
---
mathLink: auto
---

$0
endsnippet

context "notMath()"
snippet MC "mathLink: ..." b
---
mathLink: $1
---

$0
endsnippet

context "notMath()"
snippet MB "mathLink-blocks: ..." b
---
mathLink-blocks:
	$1: $2
---

$0
endsnippet

# Environments
snippet pro "begin proof" b
<i>Proof$1.</i> $0
endsnippet

snippet rem "begin remark" b
<b>Remark.</b> $0
endsnippet

snippet eq "begin equation" b
$$\begin{equation}
	$0
\end{equation}$$
endsnippet

snippet 2ci "begin dcases" b
\begin{dcases}
	$1 & \textrm{\it{if\hspace{0.1in}}}$2 \\\\
	$0 & \textrm{\it{else}}
\end{dcases}
endsnippet

# Templates
snippet def "Definition" b
<div class="topSpace"></div>

Date Created: `!p from datetime import datetime
if not snip.c:
    snip.rv=datetime.now().strftime("%d/%m/%Y %H:%M:%S")`
References: #Ref/NONE
Tags: #Type/Definition #In_Progress

Types: <i>Not Applicable</i>
Examples: <i>Not Applicable</i>
Constructions: <i>Not Applicable</i>
Generalizations: <i>Not Applicable</i>

Properties: <i>Not Applicable</i>
Sufficiencies: <i>Not Applicable</i>
Equivalences: <i>Not Applicable</i>
Justifications: <i>Not Applicable</i>

\`\`\` ad-Definition
title: Definition$1.

$0

\`\`\`
endsnippet

snippet exa "Example" b
<div class="topSpace"></div>

Date Created: `!p from datetime import datetime
if not snip.c:
    snip.rv=datetime.now().strftime("%d/%m/%Y %H:%M:%S")`
References: #Ref/NONE
Tags: #Type/Example #In_Progress

Types: <i>Not Applicable</i>
Examples: <i>Not Applicable</i>
Constructions: <i>Not Applicable</i>
Generalizations: <i>Not Applicable</i>

Properties: <i>Not Applicable</i>
Sufficiencies: <i>Not Applicable</i>
Equivalences: <i>Not Applicable</i>
Justifications: <i>Not Applicable</i>

\`\`\` ad-Example
title: Example$1.

$0

\`\`\`
endsnippet

snippet prp "Proposition" b
<div class="topSpace"></div>

Date Created: `!p from datetime import datetime
if not snip.c:
    snip.rv=datetime.now().strftime("%d/%m/%Y %H:%M:%S")`
References: #Ref/NONE
Tags: #Type/Proposition #In_Progress

Proved by: <i>Not Applicable</i>
References: <i>Not Applicable</i>
Justifications: <i>Not Applicable</i>

Specializations: <i>Not Applicable</i>
Generalizations: <i>Not Applicable</i>

\`\`\` ad-Proposition
title: Proposition$1.

$2

\`\`\`

<i>Proof.</i> $0
endsnippet

snippet thm "Theorem" b
<div class="topSpace"></div>

Date Created: `!p from datetime import datetime
if not snip.c:
    snip.rv=datetime.now().strftime("%d/%m/%Y %H:%M:%S")`
References: #Ref/NONE
Tags: #Type/Theorem #In_Progress

Proved by: <i>Not Applicable</i>
References: <i>Not Applicable</i>
Justifications: <i>Not Applicable</i>

Specializations: <i>Not Applicable</i>
Generalizations: <i>Not Applicable</i>

\`\`\` ad-Theorem
title: Theorem$1.

$2

\`\`\`

<i>Proof.</i> $0
endsnippet
