# Math
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def notMath():
	return vim.eval('vimtex#syntax#in_mathzone()') != '1'
endglobal

snippet $ "enter math mode" Ai
\$$1\$$0
endsnippet

context "math()"
snippet fr "fraction" i
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet rt "sqrt" i
\sqrt$2{$1}$0
endsnippet

context "math()"
snippet der "derivative" i
\frac{\d${1: f}}{\d${2: x}}$0
endsnippet

context "math()"
snippet int "integral" i
\int$2\,\d${1:\\mu}$0
endsnippet

# Convenience
snippet th "th" it
^\textrm{${1:th}}$0
endsnippet

snippet SQ "single quotes" it
\`$1'$0
endsnippet

snippet DQ "double quotes" it
\`\`$1''$0
endsnippet

context "math()"
snippet ~ "tilde" Ai
\widetilde{$1}$0
endsnippet

context "math()"
snippet ^ "hat" i
\widehat{$1}$0
endsnippet

context "math()"
snippet << "ll" i
\ll$0
endsnippet

context "math()"
snippet >> "gg" i
\gg$0
endsnippet

context "math()"
snippet d= "coloneqq" i
\coloneqq
endsnippet

context "math()"
snippet =d "eqqcolon" i
\eqqcolon
endsnippet

context "math()"
snippet dequiv "colon<=>" i
\,\colon\!\Leftrightarrow
endsnippet

context "math()"
snippet ubrace "underbrace" i
\underbrace{$1}_{\mathclap{$2}}$0
endsnippet

context "math()"
snippet obrace "overbrace" i
\overbrace{$1}_{\mathclap{$2}}$0
endsnippet

context "math()"
snippet uset "underset" i
\underset{$2}{$1}$0
endsnippet

context "math()"
snippet oset "overset" i
\overset{$2}{$1}$0
endsnippet

snippet wrt "with respect to" i
with respect to
endsnippet

snippet wlog "without loss of generality" i
without loss of generality
endsnippet

snippet Wlog "Without loss of generality" i
Without loss of generality
endsnippet

snippet tfae "the following are equivalent" i
the following are equivalent
endsnippet

snippet Tfae "The following are equivalent" i
The following are equivalent
endsnippet

snippet stac "suppose towards a contradiction" i
suppose towards a contradiction
endsnippet

snippet Stac "Suppose towards a contradiction" i
Suppose towards a contradiction
endsnippet

context "math()"
snippet RAISEBR "raised brackets" i
\raisebox{-2pt}{$\Biggl(\!$}$1\!\raisebox{-2pt}{$\Biggr)$}$0
endsnippet

priority 1000
snippet NEXTPAGE "Exercise _ on next page" it
\vfill\hfill{\textit{[\,Exercise $1 on next page\,]}}
\pagebreak$0
endsnippet

# Environments
snippet eq "begin unnumbered equation" b
\vspace{-0.05in}
\begin{equation*}
	$0
	\vspace{-0.05in}
\end{equation*}
endsnippet

snippet eqn "begin numbered equation" b
\vspace{-0.05in}
\begin{equation}
	$0
	\vspace{-0.05in}
\end{equation}
endsnippet

snippet def "begin definition" b
\begin{definition}
	$0
\end{definition}
endsnippet

snippet prp "begin proposition" b
\begin{proposition}
	$0
\end{proposition}
endsnippet

priority 100
snippet thm "begin theorem" b
\begin{theorem}
	$0
\end{theorem}
endsnippet

priority 200
snippet mthm "begin mainTheorem" b
\begin{mainTheorem}
	$0
\end{mainTheorem}
endsnippet

snippet cor "begin corollary" b
\begin{corollary}
	$0
\end{corollary}
endsnippet

snippet lem "begin lemma" b
\begin{lemma}
	$0
\end{lemma}
endsnippet

snippet con "begin conjecture" b
\begin{conjecture}
	$0
\end{conjecture}
endsnippet

snippet pro "begin proof" b
\begin{proof}
	$0
\end{proof}
endsnippet

snippet rem "begin remark" b
\begin{remark}
	$0
\end{remark}
endsnippet

snippet exa "begin example" b
\begin{example}
	$0
\end{example}
endsnippet

snippet fct "begin fact" b
\begin{fact}
	$0
\end{fact}
endsnippet

snippet que "begin question" b
\begin{question}
	$0
\end{question}
endsnippet

snippet cla "begin claim" b
\begin{claim*}
	$0
\end{claim*}
endsnippet

snippet obs "begin observation" b
\begin{observation*}
	$0
\end{observation*}
endsnippet

snippet axi "begin axiom" b
\begin{axiom}
	$0
\end{axiom}
endsnippet

snippet not "begin notation" b
\begin{notation}
	$0
\end{notation}
endsnippet

snippet exer "begin exercise" b
\begin{exercise}
	$0
\end{exercise}
endsnippet

snippet sol "begin solution" b
\begin{solution}
	$0
\end{solution}
endsnippet

snippet solh "begin solution hidden" b
\if\show1
	\begin{solution}
		$0
	\end{solution}
\fi
endsnippet

snippet abs "begin abstract" b
\begin{abstract}
	$0
\end{abstract}
endsnippet

snippet ali "begin aligned" b
\begin{aligned}
	$0
\end{aligned}
endsnippet

snippet alia "begin alignedat" b
\begin{alignedat}{$1}
	$0
\end{alignedat}
endsnippet

snippet gat "begin gathered" b
\begin{gathered}
	$0
\end{gathered}
endsnippet

snippet 2c "begin dcases" b
\begin{dcases}
	$1 & \textrm{if }$2 \\\\
	$0 & \textrm{else}
\end{dcases}
endsnippet

snippet fig "begin figure" b
\begin{figure}[h]
	\center
	$0
\end{figure}
endsnippet

snippet tikz "begin tikzpicture" b
\begin{center}
	\begin{tikzpicture}
		$0
	\end{tikzpicture}
\end{center}
endsnippet

snippet tikzcd "begin tikzcd" b
\begin{equation*}
	\begin{tikzcd}
		$0
	\end{tikzcd}
\end{equation*}
endsnippet

snippet tikzauto "begin automata" b
\begin{center}
	\begin{tikzpicture}[shorten >=1pt, node distance=2cm, on grid, auto]
		$0
	\end{tikzpicture}
\end{center}
endsnippet

snippet scope "begin scope" b
\begin{scope}[$1]
	$0
\end{scope}
endsnippet

snippet fra "begin frame" b
\begin{frame}{$1}
	$0
\end{frame}
endsnippet

snippet center "begin center" b
\begin{center}
	$0
\end{center}
endsnippet

snippet minipage "begin minipage" b
\begin{minipage}{$1\\textwidth}
	$0
\end{minipage}
endsnippet

snippet leftbar "begin leftbar" b
\begin{leftbar}
	$0
\end{leftbar}
endsnippet

snippet table "begin table" b
\begin{center}
	\begin{tabular}
		$0
	\end{tabular}
\end{center}
endsnippet

snippet alg "begin algorithm" b
\begin{center}
	\parbox{${1:0.85}\textwidth}{
	\begin{algorithm}[H]
		\caption{$2}
		\SetKwInOut{Input}{input}\SetKwInOut{Output}{output}
		\Input{$3}
		\Output{$4}
		\BlankLine
		$0
	\end{algorithm}}
\end{center}
endsnippet

# Lists and matrices (https://github.com/SirVer/ultisnips/blob/master/doc/examples/tabstop-generation/README.md)
global !p
def create_placeholders(snip):
	anon_snippet_body = ""
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	for i in range(start, end): del snip.buffer[start]
	snip.buffer[start] = ''
	snip.expand_anon(anon_snippet_body)

def create_list(count, base_indent=""):
    res = ""
    placeholder = 1
    item_indent = base_indent + "    "
    vspace_indent = item_indent + "    "

    for i in range(int(count)):
        if i == 0:
            res += f"    \\item ${placeholder}\n"
        if i != 0:
            res += item_indent + f"\\item ${placeholder}\n"
        placeholder += 1
        if i != int(count) - 1:
            res += vspace_indent + "\\vspace{-0.05in}\n"
    return res.rstrip()

def create_alpha_list_upto(letter, base_indent=""):
    res = ""
    placeholder = 1
    item_indent = base_indent + "    "
    vspace_indent = item_indent + "    "
    alphabet = string.ascii_lowercase

    last_index = alphabet.index(letter.lower())
    for i in range(last_index + 1):
        label = alphabet[i]
        if i == 0:
            res += f"    \\item[({label})] ${placeholder}\n"
        else:
            res += item_indent + f"\\item[({label})] ${placeholder}\n"
        placeholder += 1
        if i != last_index:
            res += vspace_indent + "\\vspace{-0.05in}\n"
    return res.rstrip()

def create_matrix(cols, rows, sep, start, end, indent=""):
    res = ""
    placeholder = 1
    for row in range(0, int(rows)):
        line = ""
        if row > 0:
            line += indent
        line += start + f"${placeholder} "
        placeholder += 1
        for col in range(1, int(cols)):
            line += sep + f" ${placeholder} "
            placeholder += 1
        line += end
        if row != int(rows) - 1:
            line += "\n"
        res += line
    return res
endglobal

priority 1000
post_jump "create_placeholders(snip)"
snippet '(\d+)x(\d+)mat' "begin n x m matrix" br
\begin{pNiceMatrix}
`!p
indent = re.match(r'\s*', snip.buffer[snip.snippet_start[0]]).group(0)
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\", indent)
`$0
\end{pMiceMatrix}
endsnippet

priority 1000
post_jump "create_placeholders(snip)"
snippet '(\d+)item' "begin itemize" br
\begin{itemize}
`!p
indent = re.match(r'\s*', snip.buffer[snip.snippet_start[0]]).group(0)
snip.rv = create_list(match.group(1), indent)
`$0
\end{itemize}
endsnippet

priority 1000
post_jump "create_placeholders(snip)"
snippet '((\d+)|[a-z])enum' "begin enumerate" br
\begin{enumerate}
`!p
indent = re.match(r'\s*', snip.buffer[snip.snippet_start[0]]).group(0)
val = match.group(1)
if val.isdigit():
    snip.rv = create_list(val, indent)
else:
    snip.rv = create_alpha_list_upto(val, indent)
`$0
\end{enumerate}
endsnippet

# Brackets
priority 100
context "math()"
snippet pa "()" i
\l($1\r)$0
endsnippet

priority 100
context "math()"
snippet sq "[]" i
\l[$1\r]$0
endsnippet

priority 100
context "math()"
snippet no "||||" i
\l\|$1\r\|$0
endsnippet

context "math()"
snippet ba "||" i
\l|$1\r|$0
endsnippet

context "math()"
snippet su ".|" i
\l.$1\r|_$0
endsnippet

context "math()"
snippet an "<>" i
\l\langle$1\r\rangle$0
endsnippet

context "math()"
snippet fl "floor" i
\l\lfloor$1\r\rfloor$0
endsnippet

context "math()"
snippet cl "ceiling" i
\l\lceil$1\r\rceil$0
endsnippet

priority 200
context "math()"
snippet dsq "[[]]" i
\l[\!\l[$1\r]\!\r]$0
endsnippet

context "math()"
snippet br "{}" i
\l\\{$1\r\\}$0
endsnippet

# Typesetting
context "math()"
priority 100
snippet bf "bold" i
\mathbf{$1}$0
endsnippet

context "math()"
priority 200
snippet it "italics" i
\mathit{$1}$0
endsnippet

context "math()"
priority 100
snippet sc "small caps" i
\mathsc{$1}$0
endsnippet

context "math()"
priority 200
snippet rm "rm" i
\mathrm{$1}$0
endsnippet

context "math()"
priority 200
snippet tt "tt" i
\mathtt{$1}$0
endsnippet

context "math()"
priority 200
snippet sf "sf" i
\mathsf{$1}$0
endsnippet

priority 100
snippet bf "bold" i
\textbf{$1}$0
endsnippet

priority 100
snippet it "italics" i
\textit{$1}$0
endsnippet

priority 100
snippet sc "small caps" i
\textsc{$1}$0
endsnippet

priority 100
snippet rm "rm" i
\textrm{$1}$0
endsnippet

priority 100
snippet tt "tt" i
\texttt{$1}$0
endsnippet

priority 100
snippet sf "sf" i
\textsf{$1}$0
endsnippet

# Arrows
priority 100
context "math()"
snippet -> "right arrow" i
\rightarrow
endsnippet

priority 200
context "math()"
snippet --> "long right arrow" i
\longrightarrow
endsnippet

priority 100
context "math()"
snippet => "right double arrow" i
\Rightarrow
endsnippet

priority 200
context "math()"
snippet ==> "long right double arrow" i
\Longrightarrow
endsnippet

priority 100
context "math()"
snippet <- "left arrow" i
\leftarrow
endsnippet

priority 200
context "math()"
snippet <-- "long left arrow" i
\longleftarrow
endsnippet

priority 100
context "math()"
snippet <= "left double arrow" i
\Leftarrow
endsnippet

priority 200
context "math()"
snippet <== "long left double arrow" i
\Longleftarrow
endsnippet

priority 300
context "math()"
snippet <-> "left right arrow" i
\leftrightarrow
endsnippet

priority 300
context "math()"
snippet <=> "Left right double arrow" i
\Leftrightarrow
endsnippet

priority 300
context "math()"
snippet <--> "left right double arrow" i
\longleftrightarrow
endsnippet

priority 300
context "math()"
snippet <==> "Long left right double arrow" i
\Longleftrightarrow
endsnippet

priority 300
context "math()"
snippet ->> "Double head right arrow" i
\twoheadrightarrow
endsnippet

# Greek/Hebrew letters
priority 100
context "math()"
snippet A "alpha" i
\alpha
endsnippet

priority 200
context "math()"
snippet AA "aleph" i
\aleph
endsnippet

priority 100
context "math()"
snippet B "beta" i
\beta
endsnippet

priority 200
context "math()"
snippet BB "beth" i
\beth
endsnippet

priority 100
context "math()"
snippet G "gamma" i
\gamma
endsnippet

priority 200
context "math()"
snippet GG "Gamma" i
\Gamma
endsnippet

priority 300
context "math()"
snippet GGG "Bold Gamma" i
\mathbf{\Gamma}
endsnippet

priority 100
context "math()"
snippet D "delta" i
\delta
endsnippet

priority 200
context "math()"
snippet DD "Delta" i
\Delta
endsnippet

priority 300
context "math()"
snippet DDD "Bold Delta" i
\mathbf{\Delta}
endsnippet

priority 100
context "math()"
snippet E "epsilon" i
\epsilon
endsnippet

priority 100
context "math()"
snippet P "pi" i
\pi
endsnippet

priority 300
context "math()"
snippet PH "phi" i
\phi
endsnippet

priority 300
context "math()"
snippet PHH "Phi" i
\Phi
endsnippet

priority 300
context "math()"
snippet PS "psi" i
\psi
endsnippet

priority 200
context "math()"
snippet PP "Pi" i
\Pi
endsnippet

priority 300
context "math()"
snippet PPP "Bold Pi" i
\mathbf{\Pi}
endsnippet

priority 100
context "math()"
snippet L "lambda" i
\lambda
endsnippet

priority 200
context "math()"
snippet LL "Lambda" i
\Lambda
endsnippet

priority 100
context "math()"
snippet T "tau" i
\tau
endsnippet

priority 200
context "math()"
snippet TH "theta" i
\theta
endsnippet

priority 300
context "math()"
snippet TTH "Theta" i
\Theta
endsnippet

priority 100
context "math()"
snippet I "iota" i
\iota
endsnippet

priority 100
context "math()"
snippet N "eta" i
\eta
endsnippet

priority 100
context "math()"
snippet M "mu" i
\mu
endsnippet

priority 100
context "math()"
snippet K "kappa" i
\kappa
endsnippet

priority 100
context "math()"
snippet S "sigma" i
\sigma
endsnippet

priority 200
context "math()"
snippet SS "Sigma" i
\Sigma
endsnippet

priority 300
context "math()"
snippet SSS " Bold Sigma" i
\mathbf{\Sigma}
endsnippet

priority 100
context "math()"
snippet R "rho" i
\rho
endsnippet

priority 100
context "math()"
snippet W "omega" i
\omega
endsnippet

priority 200
context "math()"
snippet WW "Omega" i
\Omega
endsnippet

priority 300
context "math()"
snippet WWW "Bold Omega" i
\mathbf{\Omega}
endsnippet

priority 100
context "math()"
snippet C "chi" i
\chi
endsnippet

priority 200
context "math()"
snippet CC "continuum" i
\mathfrak{c}
endsnippet

context "math()"
snippet V "nu" i
\nu
endsnippet

priority 100
context "math()"
snippet X "xi" i
\xi
endsnippet

priority 200
context "math()"
snippet XX "Xi" i
\Xi
endsnippet

context "math()"
snippet Z "zeta" i
\zeta
endsnippet

# Spaces with text
snippet 4s "4 spaces" i
\ \ \ \ $0
endsnippet

snippet 8s "8 spaces" i
\ \ \ \ \ \ \ \ $0
endsnippet

snippet 4t "4 spaces with text" i
\ \ \ \ \textrm{$1}\ \ \ \ $0
endsnippet

snippet 8t "8 spaces with text" i
\ \ \ \ \ \ \ \ \textrm{$1}\ \ \ \ \ \ \ \ $0
endsnippet

snippet 4it "4 spaces with text (italic)" i
\ \ \ \ \mathit{$1}\ \ \ \ $0
endsnippet

snippet 8it "8 spaces with text (italic)" i
\ \ \ \ \ \ \ \ \mathit{$1}\ \ \ \ \ \ \ \ $0
endsnippet

snippet 4a "4 spaces with and" i
\ \ \ \ \textrm{and}\ \ \ \ $0
endsnippet

snippet 8a "8 spaces with and" i
\ \ \ \ \ \ \ \ \textrm{and}\ \ \ \ \ \ \ \ $0
endsnippet

snippet 4ia "4 spaces with and (italic)" i
\ \ \ \ \mathit{and}\ \ \ \ $0
endsnippet

snippet 8ia "8 spaces with and (italic)" i
\ \ \ \ \ \ \ \ \mathit{and}\ \ \ \ \ \ \ \ $0
endsnippet

snippet 4e "4 spaces with equivalence" i
\ \ \ \ \Leftrightarrow\ \ \ \ $0
endsnippet

snippet 8e "8 spaces with equivalence" i
\ \ \ \ \ \ \ \ \Leftrightarrow\ \ \ \ \ \ \ \ $0
endsnippet

snippet 4de "4 spaces with definitional equivalence" i
\ \ \ \ \,\colon\!\!\!\!\Leftrightarrow\ \ \ \ $0
endsnippet

snippet 8de "8 spaces with definitional equivalence" i
\ \ \ \ \ \ \ \ \,\colon\!\!\!\!\Leftrightarrow\ \ \ \ \ \ \ \ $0
endsnippet

snippet 4i "4 spaces with implication" i
\ \ \ \ \Rightarrow\ \ \ \ $0
endsnippet

snippet 8i "8 spaces with implication" i
\ \ \ \ \ \ \ \ \Rightarrow\ \ \ \ \ \ \ \ $0
endsnippet
